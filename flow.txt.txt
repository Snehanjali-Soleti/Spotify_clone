run 

npm start
npm start

..............

try=> 12


1..
create frontend => react by => create-react-app
create backend => node js (instalation) => npm init [some name]

2..
in backend
express , nodemon 
here by using express we created app
then basic route '/' created
then listen it on some port(main server starts)

Mongodb- no sql database(non structural)
-- we are storing our database in cloud using mongodb atlas
here we created a database

3..
backend
user model 
mongoose installation => link backend and database
--by using this we creating models(structure) in database

creating a model
    require mongoose
    connect schema
    create a model

user - sample
firstname
lastname
email
username
likedsongs
likedplaylist

4..
song model
playlist model
(we can learn refering whole object)

5..
connecting mongodb
-- password should not display directly
we store it in .envfile -- Loads environment variables from .env file
-- npm install dotenv
-- require(dotenv).config() -- need tobe attach

create file of .env
-- all values store in "process.env"  -- we can see by consoling it
while uploading we wont keep .env file

6.. 
intro to authentication

passport- is an authentication middleware in nodejs

here we are using passport-jwt (jason web token)
npm i passport passport-jwt

necessary data need to be paste (encyption code by secret key)

7..
Implementing authentication: signup

express()--> it includes all the stuff like -> listen, and many more which are not neccessary... hence we using express.Router()
we can use both -> same uses . but second few functionalities

here iam using bcryptjs (similar to bcrypt) -- used in hashing
getToken() -> i may use in many places 

8..
follow of 7

we using app.use('/auth',authRoutes) -- linking to the routes in auth

9..
login route

here we verify password and email

10..
Adding create song route - (in routes)

-* checking whether user authenticated or not 
- fetching song details for creation of song details in database

11..
defaultly user details all stored in jwt in passport-authentication
sessions - set as false => not to use session cookies

make sure ur mongoose is "mongoose": "^6.10.0",

12..
created songs routes - wrt artist and songname
++++ song search through pattern matching (in mongodb)

13..
create and get playlist

get playlist through playlist id
-- concept of req.params

14..
get all playlist that created by user
adding song in playlist

15..
here we are testing api's 

problem:
1. if artist id != 12 digits error
2. [my name] - spaces cant be taken in url hence 'get by songname error'

16..
here check playlist songs insertion (object error)

17..
frontend
tailwind installation in our project via npm

by using the documentation do

18..
iconify => to take icons

by using the step in iconify for react follow
install
import
use

19, 20, 21 => login page

22...
includng custom font in tailwind = [poppins]

add in tailwind.cong.js
add respect links in head


23..
link tag

24..
sidebar of spotify

know Iconify =>(website to take icons)
here we can use Icon component.
active?'':''

26..
navbar of home page

27..
right side music cards..

***overflow-hidden text-ellipsis whitespace-nowrap***
*** applying gradient to rightside [linear, varies throught degree]***
***fixed*** to set fix the position (if at required position use top,left,right,bottom)
*** applied rounded at both parent and child *** (mostly overflow also in same way)

29...
Setting up server helpers in reactjs

30..
linking signup to backend

value= {value}
onChange={(e)=>{
    setvalue(e.target.value)
}}

***npm i cors***   //backend as a middleware

it is a security policy related
use it in index.js
such that it will allow all urls

31..
adding cookie for storing token
useCookies()
useNavigate => to render to home


login need to come only when he is not  login

if you are logedin then again login page should not be displayed

---- setting private routes----

see condition applied to token present or on in app.js


32...
link login page to backend


33..
upload song ui

34.. browsing from local system and then uploading to cloud
Cloudinary 
fronted - we take input file through react
backend - this file is thrown to backend via nodejs 
node js uploads to Cloudinary

    1. npm i @cloudinary/react @cloudinary/url-gen cloudinary-core cloudinary-react
    2.
        <script
            src="https://widget.cloudinary.com/v2.0/global/all.js"
            type="text/javascript"
        ></script> 
    3.
        => window.cloudinary - a jason format data can be seen
    4.
        cloudinaryService.js
    5. 
        CloudinaryUpload.js
    6.
        go to cloudinary website
        create unsigned api key

        copy paste cloudinary name, upload present
    7.
        create config.js => store cloudinarypresent (it must be secret)
    8.
        src/config.js add in gitignore => these cant be uploaded in git

35..
urlset => sent as a prop for CloudinaryUpload 
song name displaying => rightUploadSong

store all name, thumbnail, track in data
data send to Authenticatedservice(for send details to backend) in util.serverhelper 

Generally in authentication we are checking via  token for fetching details of respective user
need to pass token 
but useCookies used only in component not in functions
so we using document.cookie => here by some generic  we can take token named cookie

how it works...

    1.
        taking all data (body) + taking token (if neccessary)
    2.    
        conerting to json
    3.
        returning 
    4.
        taken by backend rounter (we mentioned in route)
    5.
        it utilize the data then stores in atlas (this code rotues)

36..
my music ui [single song]

37..
Mymusic => Mysongs => Singlesong

my using map fn each data if songs is taken from get router my songs backend

authenticated get service

    1.
        created authenticated get
    2.
        data is coming from here through response
    3.
        data will be stored [useState] and taken [useEffect] fetch purpose we use use useEffect
    
*** Songs Playing ***
howler.js => we use to play

created instance to play through  onclick function in every component of singlesong


38..
songdata -> response from api

generally when a song is played then it should be in active playing even we open someother components
for that we use useContext => wraping whote routes in some context .. 
where the props that we pass under this can be used by any member.

39,40....
navbar -> respective play music section

41..
clearly created login home and home

42..
Add Change song globally functionalities
creating song context
initially using for => currentsong, setcurrent song
intially currentsong = null (context itself)
through singlesong => onclicking on each we r changing currentsong through setcurrentsong
where it reflecting and if currentsong present then play displays

43..
see video for better understanding
song play 
targetLink setup


****

  const firstUpdate = useRef(true);

      useLayoutEffect(()=>{
              {/*if it is first render then changes through changing firstupdate to false and returns then it wont effect on first time rendering */}
              if(firstUpdate.current){
                      firstUpdate.current=false;
                      return;
              }
              if(!currentSong){
                      return;
                    }
              changeSong(currentSong.track);
      }, [currentSong])

      
        const changeSong = (songsrc) => {
            if (soundPlayed) {
                soundPlayed.stop();
            }
            let sound = new Howl({
                src: [songsrc],
                html5: true,
            });
            setSoundPlayed(sound);
            sound.play();
            setIsPaused(false);
        };


****

these need to be in container itself

44..
from first song again restarts whenever window changes

1. 
    remove react.strictmode
    (it used to render code 2 times, it is not that much neccessary)
2.
    use useLayoutEffect in place of useEffect
    it renders after the execution of window
3*. 
    if(firstupdate.current) => clears above problem
4.  
    but pause play stops working
5.
    so we push into context play, pause => problem solves

active => activceScreen

45...
search UI

focus:outline-none
onfocus
onChangeonclick
onblur

46..
setting up search functionalities

    1.
        make sure at finding data through songname it should be poputated throough artist 
    2.
        bcz we get all songs under an artist together
    3.
        add searchSong functionalities .. where it includes 
        makeAuthenticationGetRequest( ) => pass route dynamically through searchtext
        we get response 
        use response.data
        we get an array format
    4.
        use singlesong
    5.
        apply onkeyDown functionality
    6.
        check ui and update


47..
    create ui for my library

48..
    setting bakend api

49..
    setting it to frontend using useEffect

50..

    make sure the position of fixed z-index 

51..
    1.
        create window for singleplaylistview
    2.
        add its route in app.js
    3.
        text it with dummy playlist it
    4. 
        check by passing as dynamic route and use useParams to use
    5.
        useEffect to get details of playlistId from backend
    6.
        check at backend about populate wrt songs followed by artist
    7.
        check response through console
    8.
        use setplaylistDetails to store response
    9.
        use playDetails and Singlesong component to render data in playDetails
    10.
        when this need to be opened => when we click on any playlist cards
    11.
        go to library => cards (here add playlistId=item._id )=> add onclick event to navigate to respective route 



52. 
    by using env variable .. we are giving a random port for frontend execution
    refer : deploy nodejs appln on aws (old series nodejs)

Deployment.... render

1.  stop both frontend and backend,  bring package.json, .enc, gitignore

2. backend/index.js

        0.    const path = require("path")
        1. const _dirname = path.resolve(); 
        2. app.use(express.static(path.join(_dirname, "/frontend/build")));
        3. app.get('*',(_, res)=> {
                res.sendFile(path.join(_dirname, "frontend", "build", "index.html"));
            })

3. modify package.json

     "dev": "nodemon backend/index.js",
    "build": "npm install && npm install --prefix frontend && npm run build --prefix frontend",
    "start": "nodemon backend/index.js"

--prefix -> moving backend to one step back 

4.  *** run : serve -s frontend/build ***
next

use : npm start

5. .gitignore  
.env
node_modules (such that they wont be included in github)

6. github open
    new repo create